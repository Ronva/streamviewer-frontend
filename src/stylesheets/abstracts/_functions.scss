// -----------------------------------------------------------------------------
// This file contains all application-wide SCSS functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, 'fonts/', $path);
}

@function palette(
  $color,
  $darkest: 15%,
  $darker: 10%,
  $dark: 5%,
  $light: 5%,
  $lighter: 10%,
  $lightest: 15%
) {
  @return (
      darkest: darken($color, $darkest),
      darker: darken($color, $darker),
      dark: darken($color, $dark),
      base: $color,
      light: lighten($color, $light),
      lighter: lighten($color, $lighter),
      lightest: lighten($color, $lightest)
  )
}

@function color($color, $tone) {
  @if map-has-key($palettes,$color) {
    $color: map-get($palettes,$color);

    @if map-has-key($color,$tone) {
      $tone: map-get($color,$tone);
      @return $tone;
    }

    @warn "unknown tone `#{$tone}` in color";
    @return null;
  }

  @warn "unknown color `#{$color}` in palette";
  @return null;
}
